function beardWrite(a,b,c){cviReturn=__checkValidInsert(a,b,c)if(cviReturn.check){htmlTemplateString=cviReturn.htmlTemplateString let rendered=Mustache.render(htmlTemplateString,c);let beforeMustaches=(rendered.match(/{{/g)||[]).length;if(beforeMustaches>0){console.error("BEARD.js (beardWrite): not all the placeholders of a template got replaced")console.error({check:false,htmlRef:a,htmlTemplate:htmlTemplateString,obj:c,rendered:rendered})return false}document.getElementById(a).innerHTML=rendered;return true}else return false}function beardPush(a,b,c){cviReturn=__checkValidInsert(a,b,c)if(cviReturn.check){htmlTemplateString=cviReturn.htmlTemplateString let rendered=Mustache.render(htmlTemplateString,c);let beforeMustaches=(rendered.match(/{{/g)||[]).length;if(beforeMustaches>0){console.error("BEARD.js (beardPush): not all the placeholders of a template got replaced")console.error({check:false,htmlRef:a,htmlTemplate:htmlTemplateString,obj:c,rendered:rendered})return false}document.getElementById(a).insertAdjacentHTML('beforeend',rendered);return true}else return false}function beardWriteBulk(a,b,c,d){let renderedArray=[]if(c==null||c==undefined){console.error("BEARD.js (beardPushBulk): objArray is null or undefined")console.error({check:false,htmlRef:a,htmlTemplate:htmlTemplateString,objArray:c})return false}c.forEach(obj=>{cviReturn=__checkValidInsert(a,b,obj)if(cviReturn.check){if(typeof d!=='function'){console.error("BEARD.js (beardPushBulk): inBeetweenFun is not a function")console.error({check:false,htmlRef:a,htmlTemplate:htmlTemplateString,obj:element,objArray:c,rendered:rendered,inBeetweenFun:d})return false}d();htmlTemplateString=cviReturn.htmlTemplateString let rendered=Mustache.render(htmlTemplateString,obj);let beforeMustaches=(rendered.match(/{{/g)||[]).length;if(beforeMustaches>0){console.error("BEARD.js (beardWriteBulk): not all the placeholders of a template got replaced")console.error({check:false,htmlRef:a,htmlTemplate:htmlTemplateString,obj:element,objArray:c,rendered:rendered})return false}renderedArray.push(rendered)}else return false});let toRender='';renderedArray.forEach(element=>{toRender+=element});document.getElementById(a).innerHTML=toRender return true}function beardPushBulk(a,b,c,d){let renderedArray=[]if(c==null||c==undefined){console.error("BEARD.js (beardPushBulk): objArray is null or undefined")console.error({check:false,htmlRef:a,htmlTemplate:htmlTemplateString,objArray:c})return false}c.forEach(element=>{cviReturn=__checkValidInsert(a,b,element)if(cviReturn.check){if(typeof d!=='function'){console.error("BEARD.js (beardPushBulk): inBeetweenFun is not a function")console.error({check:false,htmlRef:a,htmlTemplate:htmlTemplateString,obj:element,objArray:c,rendered:rendered,inBeetweenFun:d})return false}d();htmlTemplateString=cviReturn.htmlTemplateString let rendered=Mustache.render(htmlTemplateString,element);let beforeMustaches=(rendered.match(/{{/g)||[]).length;if(beforeMustaches>0){console.error("BEARD.js (beardPushBulk): not all the placeholders of a template got replaced")console.error({check:false,htmlRef:a,htmlTemplate:htmlTemplateString,obj:element,objArray:c,rendered:rendered})return false}renderedArray.push(rendered)}else return false});let toRender='';renderedArray.forEach(element=>{toRender+=element});document.getElementById(a).insertAdjacentHTML('beforeend',toRender);return true}function __checkCorrispondence(a){let beforeMustaches=(a.match(/{{/g)||[]).length;let afterMustaches=(a.match(/}}/g)||[]).length;if(beforeMustaches!=afterMustaches){console.error("BEARD.js (__checkCorrispondence): the number of {{ and }} don't match, check your template")return false}return true}function __checkValidInsert(a,b,c){htmlTemplateElem=document.getElementById(b)if(htmlTemplateElem!=null){htmlTemplateString=htmlTemplateElem.innerHTML}if(htmlTemplateString.trim()==''){console.error("BEARD.js (__checkValidInsert): the htmlTemplateString is empty")console.error({htmlRef:a,htmlTemplate:b,obj:c,htmlTemplateString:htmlTemplateString})return{check:false}}else if(a!=null&&a!=undefined&&b!=null&&b!=undefined&&c!=null&&c!=undefined){if(__checkCorrispondence(htmlTemplateString))return{check:true,htmlTemplateString:htmlTemplateString}else return{check:false}}else{console.error("BEARD.js (__checkValidInsert): one of the arguments passed is null or undefined")console.error({htmlRef:a,htmlTemplate:b,obj:c,htmlTemplateString:htmlTemplateString})return{check:false}}}